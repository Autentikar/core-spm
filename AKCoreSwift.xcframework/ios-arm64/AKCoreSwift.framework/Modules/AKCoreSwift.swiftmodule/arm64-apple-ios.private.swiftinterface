// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name AKCoreSwift
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CommonCrypto
import CoreLocation
import Foundation
import JOSESwift
import Network
import Security
import Swift
import SystemConfiguration
import UIKit
import _Concurrency
import _StringProcessing
@_hasMissingDesignatedInitializers public class AKExternalRouter {
  public static func create() -> AKCoreSwift.AKExternal
  @objc deinit
}
public protocol AKResultTypeDataModel {
  var stepId: Swift.String { get set }
  var instance: Swift.String { get set }
  var flowId: Swift.String { get set }
}
public struct AKPushNotificationResultModel : AKCoreSwift.AKResultTypeDataModel {
  public var stepId: Swift.String
  public var instance: Swift.String
  public var flowId: Swift.String
}
public enum AKResultTypeModel {
  case pushNotification(AKCoreSwift.AKPushNotificationResultModel)
  public init(from data: AKCoreSwift.AKResultTypeModel)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class AKCoreOptions : ObjectiveC.NSObject {
  public static let start: AKCoreSwift.Start
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Start : ObjectiveC.NSObject {
  public func inFlowID(flowId: Swift.String, user: AKCoreSwift.User? = nil, stage: AKCoreSwift.CoreStage = .prod, customFields: [Swift.String : Any]? = [:], files: [Swift.String : Swift.String]? = [:], isInstanceIDResponse: Swift.Bool = false) -> AKCoreSwift.InitFlow
  public func inNextStep(nextStepToken: Swift.String, stage: AKCoreSwift.CoreStage = .prod) -> AKCoreSwift.InitFlow
  public func inExternalLink(token: Swift.String, stage: AKCoreSwift.CoreStage = .prod) -> AKCoreSwift.InitFlow
  @objc deinit
}
@usableFromInline
internal protocol _AnyDecodable {
  var value: Any { get }
  init<T>(_ value: T?)
}
@_hasMissingDesignatedInitializers public class AKExternal {
  public func instanceParams(step: AKCoreSwift.AKExternalStepTypes, data: Swift.String, _ completion: @escaping (Swift.Result<Foundation.Data, AKCoreSwift.AutentikarError>) -> ())
  public func instancePreProcess(step: AKCoreSwift.AKExternalStepTypes, data: Any? = nil, completion: @escaping (Swift.Result<Swift.String, AKCoreSwift.AutentikarError>) -> ())
  public func instanceProccess(step: AKCoreSwift.AKExternalStepTypes, data: Swift.String, _ completion: @escaping (Swift.Result<Foundation.Data, AKCoreSwift.AutentikarError>) -> ())
  @objc deinit
}
public enum AKExternalStepTypes {
  case faceCapture
  case cardCapture
  case cardCaptureAK
  public static func == (a: AKCoreSwift.AKExternalStepTypes, b: AKCoreSwift.AKExternalStepTypes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc public enum AKStepType : Swift.Int, Swift.RawRepresentable {
  case faceCapture
  case cardCapture
  case cardCaptureAK
  case biometricAuthiPhoneDevice
  case CARD_IMAGES_CAPTURE
  case CARD_NFC_CAPTURE
  case NFC_CAPTURE
  case CEL_CAPTURE
  case EMAIL_CAPTURE
  case REQUIRE_PUSH
  case TOKEN_CAPTURE
  case result
  public typealias RawValue = Swift.String
  public var rawValue: AKCoreSwift.AKStepType.RawValue {
    get
  }
  public init?(rawValue: AKCoreSwift.AKStepType.RawValue)
}
public struct KeychainSwiftConstants {
  public static var accessGroup: Swift.String {
    get
  }
  public static var accessible: Swift.String {
    get
  }
  public static var attrAccount: Swift.String {
    get
  }
  public static var attrSynchronizable: Swift.String {
    get
  }
  public static var klass: Swift.String {
    get
  }
  public static var matchLimit: Swift.String {
    get
  }
  public static var returnData: Swift.String {
    get
  }
  public static var valueData: Swift.String {
    get
  }
  public static var returnReference: Swift.String {
    get
  }
  public static var returnAttributes: Swift.String {
    get
  }
  public static var secMatchLimitAll: Swift.String {
    get
  }
}
public enum CoreStage {
  case dev
  case qa
  case prod
  public typealias RawValue = Swift.String
  public init?(rawValue: AKCoreSwift.CoreStage.RawValue)
  public static func == (a: AKCoreSwift.CoreStage, b: AKCoreSwift.CoreStage) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct User {
  public init(country: Swift.String, docType: Swift.String, idNum: Swift.String)
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class InitFlow : ObjectiveC.NSObject {
  @objc deinit
}
@usableFromInline
internal protocol _AnyEncodable {
  var value: Any { get }
  init<T>(_ value: T?)
}
public struct AutentikarError : Swift.Error {
  public var event: AKCoreSwift.AKEvents
  public init(event: AKCoreSwift.AKEvents)
}
open class KeychainSwift {
  open var lastResultCode: Darwin.OSStatus
  open var accessGroup: Swift.String?
  open var synchronizable: Swift.Bool
  public init()
  public init(keyPrefix: Swift.String)
  @discardableResult
  open func set(_ value: Swift.String, forKey key: Swift.String, withAccess access: AKCoreSwift.KeychainSwiftAccessOptions? = nil) -> Swift.Bool
  @discardableResult
  open func set(_ value: Foundation.Data, forKey key: Swift.String, withAccess access: AKCoreSwift.KeychainSwiftAccessOptions? = nil) -> Swift.Bool
  @discardableResult
  open func set(_ value: Swift.Bool, forKey key: Swift.String, withAccess access: AKCoreSwift.KeychainSwiftAccessOptions? = nil) -> Swift.Bool
  open func get(_ key: Swift.String) -> Swift.String?
  open func getData(_ key: Swift.String, asReference: Swift.Bool = false) -> Foundation.Data?
  open func getBool(_ key: Swift.String) -> Swift.Bool?
  @discardableResult
  open func delete(_ key: Swift.String) -> Swift.Bool
  public var allKeys: [Swift.String] {
    get
  }
  @discardableResult
  open func clear() -> Swift.Bool
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class AKBaseCapture : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public var isSuccess: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var recognizerView: UIKit.UIViewController?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) public func success()
  @_Concurrency.MainActor(unsafe) public func cancel()
  @_Concurrency.MainActor(unsafe) public func cancelRecognizer(withText text: Swift.String? = nil)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AKCoreCustomization : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public var showLogo: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var logo: UIKit.UIImage {
    @objc get
    @objc set
  }
  @objc public var showBackgroundImage: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var backgroundImage: UIKit.UIImage {
    @objc get
    @objc set
  }
  @objc public var backgroundColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc public var textColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc public var activityViewColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc public var loadingScreenCustomization: AKCoreSwift.AKCoreCustomization.LoadingScreen {
    @objc get
    @objc set
  }
  @objc @_inheritsConvenienceInitializers public class LoadingScreen : ObjectiveC.NSObject {
    @objc override dynamic public init()
    @objc public var showLogo: Swift.Bool {
      @objc get
      @objc set
    }
    @objc public var logo: UIKit.UIImage {
      @objc get
      @objc set
    }
    @objc public var showBackgroundImage: Swift.Bool {
      @objc get
      @objc set
    }
    @objc public var backgroundImage: UIKit.UIImage {
      @objc get
      @objc set
    }
    @objc public var backgroundColor: UIKit.UIColor {
      @objc get
      @objc set
    }
    @objc public var textColor: UIKit.UIColor {
      @objc get
      @objc set
    }
    @objc public var activityViewColor: UIKit.UIColor {
      @objc get
      @objc set
    }
    @objc deinit
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ProgressiveViewScreen {
  public static let shared: AKCoreSwift.ProgressiveViewScreen
  public var processingData: UIKit.UILabel {
    get
    set
  }
  public func show()
  public func hideView()
  @objc deinit
}
public enum KeychainSwiftAccessOptions {
  case accessibleWhenUnlocked
  case accessibleWhenUnlockedThisDeviceOnly
  case accessibleAfterFirstUnlock
  case accessibleAfterFirstUnlockThisDeviceOnly
  case accessibleWhenPasscodeSetThisDeviceOnly
  public static func == (a: AKCoreSwift.KeychainSwiftAccessOptions, b: AKCoreSwift.KeychainSwiftAccessOptions) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum AKEvents {
  case noInternetConnection
  case serverError
  case failedMappingData
  case generalError
  case notFoundData
  case noSignatureSDK
  case invalidSignatureSDK
  case invalidApplicationId(_: Swift.String)
  case failedEncryptData
  case dynamicError(_: Swift.String)
  case refreshSession
  case withoutData
  case notFoundHeader
  case noAction
  case noControllerRegister
  case authExpired
  case authNoAvailable
  case modelNoMatch
}
extension AKCoreSwift.AKEvents {
  public var description: Swift.String {
    get
  }
  public var title: Swift.String {
    get
  }
  public var isInstanceEnd: Swift.Bool {
    get
  }
}
@objc public protocol AKDynamicFlowDelegate {
  @objc func onSuccess(_ result: Any?)
  @objc func onFailure()
}
@objc public protocol AKStepSharedRouterProtocol {
  @objc var step: AKCoreSwift.AKStepType { get set }
  @objc func createModule(parent vc: UIKit.UIViewController) -> UIKit.UIViewController
}
extension UIKit.UIImage {
  public var PNGBase64: Swift.String {
    get
  }
}
public protocol AKBaseCaptureDelegate : AnyObject {
  func success(capture: AKCoreSwift.AKBaseCaptureViewController, response: Swift.String?)
  func result(capture: AKCoreSwift.AKBaseCaptureViewController, response: Swift.String?)
  func failed(capture: AKCoreSwift.AKBaseCaptureViewController, error: AKCoreSwift.AutentikarError?)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class AKBaseCaptureViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) open var isSuccess: Swift.Bool
  @_Concurrency.MainActor(unsafe) open var recognizerView: UIKit.UIViewController?
  @_Concurrency.MainActor(unsafe) weak public var delegate: AKCoreSwift.AKBaseCaptureDelegate?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) open func success()
  @_Concurrency.MainActor(unsafe) open func cancel(_ error: AKCoreSwift.AutentikarError?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class AKCore : ObjectiveC.NSObject {
  public typealias AnyAKStepViewController = AKCoreSwift.AKBaseCaptureViewController.Type
  public typealias AnyAKStepProcotol = AKCoreSwift.AKStepSharedRouterProtocol
  @objc public static func start(as signature: Swift.String)
  @objc public static func basicAuth(user: Swift.String, password: Swift.String)
  @objc public static func setCustomization(customization: AKCoreSwift.AKCoreCustomization)
  @objc public static func start(_ viewController: UIKit.UIViewController, options: AKCoreSwift.InitFlow)
  @objc public static func register(for stepProtocol: AKCoreSwift.AKStepSharedRouterProtocol)
  @objc deinit
}
extension AKCoreSwift.AKExternalStepTypes : Swift.Equatable {}
extension AKCoreSwift.AKExternalStepTypes : Swift.Hashable {}
extension AKCoreSwift.AKStepType : Swift.Equatable {}
extension AKCoreSwift.AKStepType : Swift.Hashable {}
extension AKCoreSwift.CoreStage : Swift.Equatable {}
extension AKCoreSwift.CoreStage : Swift.Hashable {}
extension AKCoreSwift.KeychainSwiftAccessOptions : Swift.Equatable {}
extension AKCoreSwift.KeychainSwiftAccessOptions : Swift.Hashable {}
