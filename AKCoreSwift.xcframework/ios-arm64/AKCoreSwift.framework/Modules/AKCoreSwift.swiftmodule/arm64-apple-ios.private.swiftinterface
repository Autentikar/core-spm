// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name AKCoreSwift
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import CommonCrypto
import Compression
import DeveloperToolsSupport
import Foundation
import LocalAuthentication
import ObjectiveC
import Security
import Swift
import SwiftUI
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@available(*, deprecated, message: "This type will be removed with the next major release.")
public struct EncryptionContext {
}
@available(*, deprecated, message: "This type will be removed with the next major release.")
public struct SymmetricEncryptionContext {
}
public struct AKReturn {
  public var result: Any?
  public var instanceId: Swift.String?
  public var instanceResponse: Any?
}
@_hasMissingDesignatedInitializers public class AKConnectionExternalRouter {
  public static func asDefault() -> AKCoreSwift.AKConnectionExternal
  public static func asLink() -> AKCoreSwift.AKConnectionExternal
  @objc deinit
}
extension Foundation.Data {
  public init?(base64URLEncoded base64URLString: Swift.String)
  public init?(base64URLEncoded base64URLData: Foundation.Data)
  public func base64URLEncodedString() -> Swift.String
  public func base64URLEncodedData() -> Foundation.Data
}
extension Foundation.Data {
  public init(_ data: Foundation.Data)
  public func data() -> Foundation.Data
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class AKCoreOptions : ObjectiveC.NSObject {
  public static let start: AKCoreSwift.Start
  public static var account: Swift.String
  public static var timeout: Foundation.TimeInterval
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Start : ObjectiveC.NSObject {
  public func inFlowID(flowId: Swift.String, user: AKCoreSwift.User? = nil, stage: AKCoreSwift.CoreStage = .prod, customFields: [Swift.String : Any]? = [:], files: [Swift.String : Swift.String]? = [:], responseType: AKCoreSwift.ResponseType = .result) -> AKCoreSwift.InitFlow
  public func inExternalApp(nextToken: Swift.String, authToken: Swift.String, stage: AKCoreSwift.CoreStage = .prod) -> AKCoreSwift.InitFlow
  public func inNextStep(nextStepToken: Swift.String, stage: AKCoreSwift.CoreStage = .prod) -> AKCoreSwift.InitFlow
  public func inExternalLink(token: Swift.String, stage: AKCoreSwift.CoreStage = .prod) -> AKCoreSwift.InitFlow
  @objc deinit
}
public struct AnyDecodable : Swift.Decodable {
  public let value: Any
  public init<T>(_ value: T?)
}
@usableFromInline
internal protocol _AnyDecodable {
  var value: Any { get }
  init<T>(_ value: T?)
}
extension AKCoreSwift.AnyDecodable : AKCoreSwift._AnyDecodable {
}
extension AKCoreSwift._AnyDecodable {
  public init(from decoder: any Swift.Decoder) throws
}
extension AKCoreSwift.AnyDecodable : Swift.Equatable {
  public static func == (lhs: AKCoreSwift.AnyDecodable, rhs: AKCoreSwift.AnyDecodable) -> Swift.Bool
}
extension AKCoreSwift.AnyDecodable : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension AKCoreSwift.AnyDecodable : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension AKCoreSwift.AnyDecodable : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct ToastStyle {
  public init()
  public var backgroundColor: UIKit.UIColor
  public var titleColor: UIKit.UIColor
  public var messageColor: UIKit.UIColor
  public var maxWidthPercentage: CoreFoundation.CGFloat {
    get
    set
  }
  public var maxHeightPercentage: CoreFoundation.CGFloat {
    get
    set
  }
  public var horizontalPadding: CoreFoundation.CGFloat
  public var verticalPadding: CoreFoundation.CGFloat
  public var cornerRadius: CoreFoundation.CGFloat
  public var titleFont: UIKit.UIFont
  public var messageFont: UIKit.UIFont
  public var titleAlignment: UIKit.NSTextAlignment
  public var messageAlignment: UIKit.NSTextAlignment
  public var titleNumberOfLines: Swift.Int
  public var messageNumberOfLines: Swift.Int
  public var displayShadow: Swift.Bool
  public var shadowColor: UIKit.UIColor
  public var shadowOpacity: Swift.Float {
    get
    set
  }
  public var shadowRadius: CoreFoundation.CGFloat
  public var shadowOffset: CoreFoundation.CGSize
  public var imageSize: CoreFoundation.CGSize
  public var activitySize: CoreFoundation.CGSize
  public var fadeDuration: Swift.Double
  public var activityIndicatorColor: UIKit.UIColor
  public var activityBackgroundColor: UIKit.UIColor
}
@_hasMissingDesignatedInitializers public class ToastManager {
  public static let shared: AKCoreSwift.ToastManager
  public var style: AKCoreSwift.ToastStyle
  public var isTapToDismissEnabled: Swift.Bool
  public var isQueueEnabled: Swift.Bool
  public var duration: Swift.Double
  public var position: AKCoreSwift.ToastPosition
  @objc deinit
}
public enum ToastPosition {
  case top
  case center
  case bottom
  public static func == (a: AKCoreSwift.ToastPosition, b: AKCoreSwift.ToastPosition) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class AKConnectionExternal {
  public var `default`: AKCoreSwift.AKConnectionExternal.Default?
  public var link: AKCoreSwift.AKConnectionExternal.Link?
  @_hasMissingDesignatedInitializers public class Default {
    public func instanceParams(step type: AKCoreSwift.AKExternalStepTypes, request json: Swift.String, _ completion: @escaping (Swift.Result<Foundation.Data, AKCoreSwift.AutentikarError>) -> ())
    public func instancePreProcess(step type: AKCoreSwift.AKExternalStepTypes, request json: Swift.String? = nil, _ completion: @escaping (Swift.Result<Foundation.Data, AKCoreSwift.AutentikarError>) -> ())
    public func instancePreProcessCardID(request json: Swift.String, _ completion: @escaping (Swift.Result<Foundation.Data, AKCoreSwift.AutentikarError>) -> ())
    public func instanceProccess(step type: AKCoreSwift.AKExternalStepTypes, request json: Swift.String, _ completion: @escaping (Swift.Result<Foundation.Data, AKCoreSwift.AutentikarError>) -> ())
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class Link {
    public func linkStepMethodParams(step type: AKCoreSwift.AKExternalStepTypes, request json: Swift.String, _ completion: @escaping (Swift.Result<Foundation.Data, AKCoreSwift.AutentikarError>) -> ())
    public func linkStepMethodToken(step type: AKCoreSwift.AKExternalStepTypes, request json: Swift.String, _ completion: @escaping (Swift.Result<Foundation.Data, AKCoreSwift.AutentikarError>) -> ())
    public func linkStepMethodIdScanOnly(request json: Swift.String, _ completion: @escaping (Swift.Result<Foundation.Data, AKCoreSwift.AutentikarError>) -> ())
    public func linkStepMethodFaceCapture(request json: Swift.String, _ completion: @escaping (Swift.Result<Foundation.Data, AKCoreSwift.AutentikarError>) -> ())
    public func linkStepMethodProcess(step type: AKCoreSwift.AKExternalStepTypes, request json: Swift.String?, _ completion: @escaping (Swift.Result<Foundation.Data, AKCoreSwift.AutentikarError>) -> ())
    @objc deinit
  }
  @objc deinit
}
public struct AKAnyCodable : Swift.Codable {
  public let value: Any
  public init<T>(_ value: T?)
}
extension AKCoreSwift.AKAnyCodable : AKCoreSwift._AnyEncodable, AKCoreSwift._AnyDecodable {
}
extension AKCoreSwift.AKAnyCodable : Swift.Equatable {
  public static func == (lhs: AKCoreSwift.AKAnyCodable, rhs: AKCoreSwift.AKAnyCodable) -> Swift.Bool
}
extension AKCoreSwift.AKAnyCodable : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension AKCoreSwift.AKAnyCodable : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension AKCoreSwift.AKAnyCodable : Swift.ExpressibleByNilLiteral {
}
extension AKCoreSwift.AKAnyCodable : Swift.ExpressibleByBooleanLiteral {
  public typealias BooleanLiteralType = Swift.Bool
}
extension AKCoreSwift.AKAnyCodable : Swift.ExpressibleByIntegerLiteral {
  public typealias IntegerLiteralType = Swift.Int
}
extension AKCoreSwift.AKAnyCodable : Swift.ExpressibleByFloatLiteral {
  public typealias FloatLiteralType = Swift.Double
}
extension AKCoreSwift.AKAnyCodable : Swift.ExpressibleByStringLiteral {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension AKCoreSwift.AKAnyCodable : Swift.ExpressibleByArrayLiteral {
  public typealias ArrayLiteralElement = Any
}
extension AKCoreSwift.AKAnyCodable : Swift.ExpressibleByDictionaryLiteral {
  public typealias Key = Swift.AnyHashable
  public typealias Value = Any
}
extension AKCoreSwift.AKAnyCodable : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum AKExternalStepTypes {
  case faceCapture
  case cardCapture
  case cardCaptureAK
  case simpleCardCapture
  case documentVerifier
  case faceVerifier
  case faceTecCardID
  public typealias RawValue = Swift.String
  public var rawValue: AKCoreSwift.AKExternalStepTypes.RawValue {
    get
  }
  public init?(rawValue: AKCoreSwift.AKExternalStepTypes.RawValue)
  public static func == (a: AKCoreSwift.AKExternalStepTypes, b: AKCoreSwift.AKExternalStepTypes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc public enum AKStepType : Swift.Int, Swift.RawRepresentable {
  case faceCapture
  case cardCapture
  case cardCaptureAK
  case simpleCardCapture
  case documentVerifier
  case faceVerifier
  case faceTecCardID
  case biometricAuthiPhoneDevice
  case CARD_IMAGES_CAPTURE
  case CARD_NFC_CAPTURE
  case NFC_CAPTURE
  case CEL_CAPTURE
  case EMAIL_CAPTURE
  case REQUIRE_PUSH
  case TOKEN_CAPTURE
  case result
  case confirm
  case fileViewer
  case uanataca_otp
  public typealias RawValue = Swift.String
  public var rawValue: AKCoreSwift.AKStepType.RawValue {
    get
  }
  public init?(rawValue: AKCoreSwift.AKStepType.RawValue)
}
public struct KeychainSwiftConstants {
  public static var accessGroup: Swift.String {
    get
  }
  public static var accessible: Swift.String {
    get
  }
  public static var attrAccount: Swift.String {
    get
  }
  public static var attrSynchronizable: Swift.String {
    get
  }
  public static var klass: Swift.String {
    get
  }
  public static var matchLimit: Swift.String {
    get
  }
  public static var returnData: Swift.String {
    get
  }
  public static var valueData: Swift.String {
    get
  }
  public static var returnReference: Swift.String {
    get
  }
  public static var returnAttributes: Swift.String {
    get
  }
  public static var secMatchLimitAll: Swift.String {
    get
  }
}
@objc public enum StartType : Swift.Int, Swift.RawRepresentable {
  case `default` = 0
  case link = 1
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum CoreStage : Swift.Int {
  case dev
  case qa
  case prod
  public typealias RawValue = Swift.String
  public init?(rawValue: AKCoreSwift.CoreStage.RawValue)
  public var rawValue: AKCoreSwift.CoreStage.RawValue {
    get
  }
}
public struct User {
  public init(country: Swift.String, docType: Swift.String, idNum: Swift.String)
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class InitFlow : ObjectiveC.NSObject {
  @objc deinit
}
public struct AnyEncodable : Swift.Encodable {
  public let value: Any
  public init<T>(_ value: T?)
}
@usableFromInline
internal protocol _AnyEncodable {
  var value: Any { get }
  init<T>(_ value: T?)
}
extension AKCoreSwift.AnyEncodable : AKCoreSwift._AnyEncodable {
}
extension AKCoreSwift._AnyEncodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
extension AKCoreSwift.AnyEncodable : Swift.Equatable {
  public static func == (lhs: AKCoreSwift.AnyEncodable, rhs: AKCoreSwift.AnyEncodable) -> Swift.Bool
}
extension AKCoreSwift.AnyEncodable : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension AKCoreSwift.AnyEncodable : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension AKCoreSwift.AnyEncodable : Swift.ExpressibleByNilLiteral {
}
extension AKCoreSwift.AnyEncodable : Swift.ExpressibleByBooleanLiteral {
  public typealias BooleanLiteralType = Swift.Bool
}
extension AKCoreSwift.AnyEncodable : Swift.ExpressibleByIntegerLiteral {
  public typealias IntegerLiteralType = Swift.Int
}
extension AKCoreSwift.AnyEncodable : Swift.ExpressibleByFloatLiteral {
  public typealias FloatLiteralType = Swift.Double
}
extension AKCoreSwift.AnyEncodable : Swift.ExpressibleByStringLiteral {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension AKCoreSwift.AnyEncodable : Swift.ExpressibleByStringInterpolation {
  public typealias StringInterpolation = Swift.DefaultStringInterpolation
}
extension AKCoreSwift.AnyEncodable : Swift.ExpressibleByArrayLiteral {
  public typealias ArrayLiteralElement = Any
}
extension AKCoreSwift.AnyEncodable : Swift.ExpressibleByDictionaryLiteral {
  public typealias Key = Swift.AnyHashable
  public typealias Value = Any
}
extension AKCoreSwift._AnyEncodable {
  public init(nilLiteral _: ())
  public init(booleanLiteral value: Swift.Bool)
  public init(integerLiteral value: Swift.Int)
  public init(floatLiteral value: Swift.Double)
  public init(extendedGraphemeClusterLiteral value: Swift.String)
  public init(stringLiteral value: Swift.String)
  public init(arrayLiteral elements: Any...)
  public init(dictionaryLiteral elements: (Swift.AnyHashable, Any)...)
}
extension AKCoreSwift.AnyEncodable : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ECCompression : Swift.UInt8 {
  case CompressedYEven
  case CompressedYOdd
  case Uncompressed
  case HybridYEven
  case HybridYOdd
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public struct AutentikarError : Swift.Error {
  public var event: AKCoreSwift.AKEvents
  public init(event: AKCoreSwift.AKEvents)
}
open class KeychainSwift {
  open var lastResultCode: Darwin.OSStatus
  open var accessGroup: Swift.String?
  open var synchronizable: Swift.Bool
  public init()
  public init(keyPrefix: Swift.String)
  @discardableResult
  open func set(_ value: Swift.String, forKey key: Swift.String, withAccess access: AKCoreSwift.KeychainSwiftAccessOptions? = nil) -> Swift.Bool
  @discardableResult
  open func set(_ value: Foundation.Data, forKey key: Swift.String, withAccess access: AKCoreSwift.KeychainSwiftAccessOptions? = nil) -> Swift.Bool
  @discardableResult
  open func set(_ value: Swift.Bool, forKey key: Swift.String, withAccess access: AKCoreSwift.KeychainSwiftAccessOptions? = nil) -> Swift.Bool
  open func get(_ key: Swift.String) -> Swift.String?
  open func getData(_ key: Swift.String, asReference: Swift.Bool = false) -> Foundation.Data?
  open func getBool(_ key: Swift.String) -> Swift.Bool?
  @discardableResult
  open func delete(_ key: Swift.String) -> Swift.Bool
  public var allKeys: [Swift.String] {
    get
  }
  @discardableResult
  open func clear() -> Swift.Bool
  @objc deinit
}
@objc public enum ResponseType : Swift.Int {
  case result
  case instance_id
  case instance_response
  case full
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class AKCoreCustomization : ObjectiveC.NSObject {
  @objc public var showLogo: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var logo: UIKit.UIImage {
    @objc get
    @objc set
  }
  @objc public var showBackgroundImage: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var backgroundImage: UIKit.UIImage {
    @objc get
    @objc set
  }
  @objc public var backgroundColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc public var textColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc public var activityViewColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @available(*, deprecated, renamed: "titleFont", message: "This property will be removed soon, use titleFont instead")
  @objc public var customFont: UIKit.UIFont? {
    @objc get
    @objc set
  }
  @objc public var titleFont: UIKit.UIFont? {
    @objc get
    @objc set
  }
  @objc public var textFont: UIKit.UIFont? {
    @objc get
    @objc set
  }
  @objc public var buttonCustomization: AKCoreSwift.AKCoreCustomization.Button {
    @objc get
    @objc set
  }
  @objc public var loadingScreenCustomization: AKCoreSwift.AKCoreCustomization.LoadingScreen {
    @objc get
    @objc set
  }
  @objc public var fileViewerCustomization: AKCoreSwift.AKCoreCustomization.FileViewer {
    @objc get
    @objc set
  }
  @objc public var otp: AKCoreSwift.AKCoreCustomization.Otp {
    @objc get
    @objc set
  }
  @objc public var bundleForLocalizableString: Foundation.Bundle? {
    @objc get
    @objc set
  }
  @objc @_inheritsConvenienceInitializers public class Button : ObjectiveC.NSObject {
    @available(*, deprecated, renamed: "primaryBackgroundColor", message: "This property will be removed soon, use primaryBackgroundColor instead")
    @objc public var backgroundColor: UIKit.UIColor {
      @objc get
      @objc set
    }
    @objc public var primaryBackgroundColor: UIKit.UIColor {
      @objc get
      @objc set
    }
    @objc public var secondaryBackgroundColor: UIKit.UIColor {
      @objc get
      @objc set
    }
    @objc public var disableBackgroundColor: UIKit.UIColor {
      @objc get
      @objc set
    }
    @objc public var borderColor: UIKit.UIColor {
      @objc get
      @objc set
    }
    @objc public var disableTextColor: UIKit.UIColor {
      @objc get
      @objc set
    }
    @available(*, deprecated, renamed: "primaryTextColor", message: "This property will be removed soon, use primaryTextColor instead")
    @objc public var textColor: UIKit.UIColor {
      @objc get
      @objc set
    }
    @objc public var primaryTextColor: UIKit.UIColor {
      @objc get
      @objc set
    }
    @objc public var secondaryTextColor: UIKit.UIColor {
      @objc get
      @objc set
    }
    @objc public var linkTextColor: UIKit.UIColor {
      @objc get
      @objc set
    }
    @available(*, deprecated, renamed: "font", message: "This property will be removed soon, use font instead")
    @objc public var customFont: UIKit.UIFont? {
      @objc get
      @objc set
    }
    @objc public var font: UIKit.UIFont? {
      @objc get
      @objc set
    }
    @objc override dynamic public init()
    @objc deinit
  }
  @objc @_inheritsConvenienceInitializers public class LoadingScreen : ObjectiveC.NSObject {
    @objc override dynamic public init()
    @objc public var showLogo: Swift.Bool {
      @objc get
      @objc set
    }
    @objc public var logo: UIKit.UIImage {
      @objc get
      @objc set
    }
    @objc public var showBackgroundImage: Swift.Bool {
      @objc get
      @objc set
    }
    @objc public var backgroundImage: UIKit.UIImage {
      @objc get
      @objc set
    }
    @objc public var backgroundColor: UIKit.UIColor {
      @objc get
      @objc set
    }
    @objc public var textColor: UIKit.UIColor {
      @objc get
      @objc set
    }
    @objc public var activityViewColor: UIKit.UIColor {
      @objc get
      @objc set
    }
    @available(*, deprecated, renamed: "font", message: "This property will be removed soon, use font instead")
    @objc public var customFont: UIKit.UIFont? {
      @objc get
      @objc set
    }
    @objc public var font: UIKit.UIFont? {
      @objc get
      @objc set
    }
    @objc deinit
  }
  @objc @_inheritsConvenienceInitializers public class FileViewer : ObjectiveC.NSObject {
    @objc override dynamic public init()
    @objc public var backgroundColor: UIKit.UIColor {
      @objc get
      @objc set
    }
    @objc public var image: UIKit.UIImage {
      @objc get
      @objc set
    }
    @objc public var textColor: UIKit.UIColor {
      @objc get
      @objc set
    }
    @objc public var tableBorderColor: UIKit.UIColor {
      @objc get
      @objc set
    }
    @objc public var checkBoxColorWhenChecked: UIKit.UIColor {
      @objc get
      @objc set
    }
    @objc public var checkBoxColorWhenNotChecked: UIKit.UIColor {
      @objc get
      @objc set
    }
    @objc deinit
  }
  @objc @_inheritsConvenienceInitializers public class Otp : ObjectiveC.NSObject {
    @objc override dynamic public init()
    @objc public var borderColor: UIKit.UIColor {
      @objc get
      @objc set
    }
    @objc public var borderTextColor: UIKit.UIColor {
      @objc get
      @objc set
    }
    @objc deinit
  }
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ProgressiveViewScreen {
  public static let shared: AKCoreSwift.ProgressiveViewScreen
  public var processingData: UIKit.UILabel {
    get
    set
  }
  public func show()
  public func hideView()
  @objc deinit
}
public enum KeychainSwiftAccessOptions {
  case accessibleWhenUnlocked
  case accessibleWhenUnlockedThisDeviceOnly
  case accessibleAfterFirstUnlock
  case accessibleAfterFirstUnlockThisDeviceOnly
  case accessibleWhenPasscodeSetThisDeviceOnly
  public static func == (a: AKCoreSwift.KeychainSwiftAccessOptions, b: AKCoreSwift.KeychainSwiftAccessOptions) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum AKEvents {
  case noInternetConnection
  case serverError
  case failedMappingData
  case generalError
  case notFoundData
  case noSignatureSDK
  case invalidSignatureSDK
  case invalidApplicationId(_: Swift.String)
  case failedEncryptData
  case dynamicError(_: Swift.String)
  case refreshSession
  case timeout
  case noValidURL
  case withoutData
  case notFoundHeader
  case noAction
  case noControllerRegister
  case authExpired
  case authNoAvailable
  case modelNoMatch
  case maxRetries
}
extension AKCoreSwift.AKEvents {
  public var description: Swift.String {
    get
  }
  public var title: Swift.String {
    get
  }
  public var isInstanceEnd: Swift.Bool {
    get
  }
}
@objc public protocol AKCoreDelegate {
  @objc func onSuccess(_ result: Any?)
  @objc func onFailure()
}
@objc public protocol AKStepSharedRouterProtocol {
  @objc var step: AKCoreSwift.AKStepType { get set }
  @objc func createModule(parent vc: UIKit.UIViewController, start type: AKCoreSwift.StartType) -> UIKit.UIViewController
}
public protocol AKBaseCaptureDelegate : AnyObject {
  func success(viewController: AKCoreSwift.AKBaseCaptureViewController, response: Swift.String)
  func failed(viewController: AKCoreSwift.AKBaseCaptureViewController, error: AKCoreSwift.AutentikarError?)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class AKBaseCaptureViewController : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency weak public var delegate: (any AKCoreSwift.AKBaseCaptureDelegate)?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency open func cancel(with error: AKCoreSwift.AutentikarError? = nil)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class AKCore : ObjectiveC.NSObject {
  public typealias AnyAKStepViewController = AKCoreSwift.AKBaseCaptureViewController.Type
  public typealias AnyAKStepProcotol = AKCoreSwift.AKStepSharedRouterProtocol
  @objc public static func start(as signature: Swift.String)
  @objc public static func basicAuth(clientID: Swift.String, clientKey: Swift.String)
  @objc public static func setCustomization(customization: AKCoreSwift.AKCoreCustomization)
  @objc public static func start(_ viewController: UIKit.UIViewController, options: AKCoreSwift.InitFlow)
  @objc public static func register(for stepProtocol: any AKCoreSwift.AKStepSharedRouterProtocol)
  @objc deinit
}
extension AKCoreSwift.ToastPosition : Swift.Equatable {}
extension AKCoreSwift.ToastPosition : Swift.Hashable {}
extension AKCoreSwift.AKExternalStepTypes : Swift.Equatable {}
extension AKCoreSwift.AKExternalStepTypes : Swift.Hashable {}
extension AKCoreSwift.AKStepType : Swift.Equatable {}
extension AKCoreSwift.AKStepType : Swift.Hashable {}
extension AKCoreSwift.StartType : Swift.Equatable {}
extension AKCoreSwift.StartType : Swift.Hashable {}
extension AKCoreSwift.CoreStage : Swift.Equatable {}
extension AKCoreSwift.CoreStage : Swift.Hashable {}
extension AKCoreSwift.CoreStage : Swift.RawRepresentable {}
extension AKCoreSwift.ECCompression : Swift.Equatable {}
extension AKCoreSwift.ECCompression : Swift.Hashable {}
extension AKCoreSwift.ECCompression : Swift.RawRepresentable {}
extension AKCoreSwift.ResponseType : Swift.Equatable {}
extension AKCoreSwift.ResponseType : Swift.Hashable {}
extension AKCoreSwift.ResponseType : Swift.RawRepresentable {}
extension AKCoreSwift.KeychainSwiftAccessOptions : Swift.Equatable {}
extension AKCoreSwift.KeychainSwiftAccessOptions : Swift.Hashable {}
